import Head from 'next/head';
import Image from 'next/image';
import Error from 'next/error';

import Foo from '@/containers/Foo';
import Bar from '@/containers/Bar';
import useAction from '@/stores/hooks/useAction';
import todosRetrieve from '@/stores/slices/todos/actions/retrieve';
import todosAdd from '@/stores/slices/todos/actions/add';
import todosUpdate from '@/stores/slices/todos/actions/update';
import todosDelete from '@/stores/slices/todos/actions/delete';
import useTodos from '@/stores/slices/todos/selectors/useTodos';
import Todo from '@/stores/slices/todos/types/Todo';
import { wrapper } from '@/stores/store';
import styles from '@/styles/index.module.scss';

export const getServerSideProps = wrapper.getServerSideProps(({ dispatch }) => async () => {
  await dispatch(todosRetrieve());

  return {
    props: {},
  };
});

export default function Index() {
  const [retrieveTodos, retrieveTodosState] = useAction(todosRetrieve);
  const [addTodo, addTodoState] = useAction(todosAdd);
  const [updateTodo, updateTodoState] = useAction(todosUpdate);
  const [deleteTodo, deleteTodoState] = useAction(todosDelete);

  const loading = retrieveTodosState('loading');
  const error = retrieveTodosState('errors')[0];

  const todos = useTodos();

  const handleAddTodo = async () => {
    await addTodo({
      title: `Task ${Math.round(Math.random() * 10000)}`,
      completed: Math.random() >= 0.5,
    });
  };

  const handleUpdateTodo = async (todo: Todo) => {
    await updateTodo({
      id: todo.id,
      title: todo.title,
      completed: !todo.completed,
    });
  };

  const handleRemoveTodo = async (todo: Todo) => {
    await deleteTodo({
      id: todo.id,
    });
  };

  if (error) {
    return (
      <Error statusCode={401}/>
    );
  }

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app"/>
        <link rel="icon" href="/favicon.ico"/>
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>
          Welcome to <a href="https://nextjs.org">Next.js!</a>
        </h1>

        <p className={styles.description}>
          Get started by editing{' '}
          <code className={styles.code}>pages/index.tsx</code>
        </p>

        <Foo/>
        <hr/>
        <Bar/>

        <div className={styles.grid}>
          {todos.map((todo) => (
            <div key={todo.id} className={styles.card}>
              <h2>{todo.id} - {todo.title}</h2>
              <p>{todo.completed ? 'Yes' : 'No'}</p>
              <div>
                <button onClick={() => handleUpdateTodo(todo)}>Update</button>
                <button onClick={() => handleRemoveTodo(todo)}>Remove</button>
              </div>
            </div>
          ))}
        </div>

        <div>{loading && 'Loading...'}</div>

        <button onClick={handleAddTodo}>
          Add Todo
        </button>
      </main>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{' '}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16}/>
          </span>
        </a>
      </footer>
    </div>
  );
}
