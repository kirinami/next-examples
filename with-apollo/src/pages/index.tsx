import Head from 'next/head';
import Image from 'next/image';
import Error from 'next/error';
import { Reference, useMutation, useQuery } from '@apollo/client';

import {
  CREATE_TODO,
  CreateTodoData,
  CreateTodoVars, DELETE_TODO, DeleteTodoData, DeleteTodoVars,
  GET_TODOS,
  GetTodosData,
  GetTodosVars, Todo,
  UPDATE_TODO, UpdateTodoData, UpdateTodoVars,
} from '@/graphql/todos';
import initializeApolloClient from '@/helpers/apollo/initializeApolloClient';
import withApolloState from '@/helpers/apollo/withApolloState';
import styles from '@/styles/index.module.scss';
import Foo from '../containers/Foo';

export async function getServerSideProps() {
  const apolloClient = initializeApolloClient();

  await apolloClient.query({
    query: GET_TODOS,
  });

  return withApolloState(apolloClient, {
    props: {},
  });
}

export default function Index() {
  const { loading, data, error } = useQuery<GetTodosData, GetTodosVars>(GET_TODOS);
  const [createTodo] = useMutation<CreateTodoData, CreateTodoVars>(CREATE_TODO);
  const [updateTodo] = useMutation<UpdateTodoData, UpdateTodoVars>(UPDATE_TODO);
  const [deleteTodo] = useMutation<DeleteTodoData, DeleteTodoVars>(DELETE_TODO);

  const todos = data?.todos || [];

  const handleAddTodo = async () => {
    await createTodo({
      variables: {
        todo: {
          title: `Task ${Math.round(Math.random() * 10000)}`,
          completed: Math.random() >= 0.5,
        },
      },
      update(cache, { data }) {
        if (!data) return;

        cache.modify({
          fields: {
            todosAll(todosRefs: Reference[] = [], { toReference }) {
              return [...todosRefs, toReference(data.todo)];
            },
          },
        });
      },
    });
  };

  const handleUpdateTodo = async (todo: Todo) => {
    await updateTodo({
      variables: {
        id: todo.id,
        todo: {
          title: todo.title,
          completed: !todo.completed,
        },
      },
    });
  };

  const handleRemoveTodo = async (todo: Todo) => {
    await deleteTodo({
      variables: {
        id: todo.id,
      },
      update(cache, { data }) {
        if (!data) return;

        cache.modify({
          fields: {
            todosAll(todosRefs: Reference[] = [], { readField }) {
              return todosRefs.filter(todoRef => readField('id', todoRef) !== data.todo.id);
            },
          },
        });
      },
    });
  };

  if (error) {
    return (
      <Error statusCode={401}/>
    );
  }

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app"/>
        <link rel="icon" href="/favicon.ico"/>
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>
          Welcome to <a href="https://nextjs.org">Next.js!</a>
        </h1>

        <p className={styles.description}>
          Get started by editing{' '}
          <code className={styles.code}>pages/index.tsx</code>
        </p>

        <Foo/>

        <div className={styles.grid}>
          {todos.map((todo) => (
            <div key={todo.id} className={styles.card}>
              <h2>{todo.id} - {todo.title}</h2>
              <p>{todo.completed ? 'Yes' : 'No'}</p>
              <div>
                <button onClick={() => handleUpdateTodo(todo)}>Update</button>
                <button onClick={() => handleRemoveTodo(todo)}>Remove</button>
              </div>
            </div>
          ))}
        </div>

        <div>{loading && 'Loading...'}</div>

        <button onClick={handleAddTodo}>
          Add Todo
        </button>
      </main>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{' '}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16}/>
          </span>
        </a>
      </footer>
    </div>
  );
}
